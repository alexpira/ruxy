

bind = "localhost:8080"
remote = "http://localhost:8000/"
rewrite_host = false
# http_server_version = "h2"

# ssl_mode = "os"

ssl_mode = "dangerous"

# ssl_mode = "file"
# cafile = "./test_server/cert.pem"

graceful_shutdown_timeout = "2sec"

# server_ssl_trust = "./test-server/cert.pem"
# server_ssl_key = "./test-server/key.pem"


log_headers=true
# log_stream = true

add_request_headers = { X-Test = "123" }
remove_request_headers = [ "X-Test2" ]

remove_reply_headers = [ "x-sample" ]
add_reply_headers = { X-Ok = "Hello" }

request_lua_script="./lua/test_request.lua"
request_lua_load_body=true
#reply_lua_script="./lua/test_reply.lua"
#reply_lua_load_body=true

[filters]
test = { path = "^/test$", method = "GET" }
test2_and_below = { path = "^/test2/.*" }
post = { method = "POST" }
root = { path = "^/$" }
lua = { path = "^/lua/.*" }

[actions]
no_log = { log = false, log_headers = false, log_request_body = false }
log_hdr = { log_headers = true }
log_body = { log_request_body = true }
to_google = { remote = "https://www.google.it", rewrite_host = true }
h2c = { http_client_version = "h2c" }
log_reply = { log_reply_body = true }
hdr_test = { add_request_headers = [ { header = "X-Test-Header", value = "hello" }, { header = "X-Test-Header", value = "hello2" } ], remove_request_headers = [ "X-Test-Header" ] }
lua_handler = { handler_lua_script = "./lua/handle.lua" }

[rules]
# r1 = { enabled = false, filter = "test", action = "to_google", disable_on = "(404)|(5..)", probability = 0.1, max_life = 10 }
# r2 = { enabled = false, action = "no_log", keep_while = "201" }
# r3 = { enabled = false, filters = ["test2_and_below","post"], actions = ["log_hdr","log_body"] }
# to_google = { filter = "root", actions = [ "to_google", "log_hdr" ] }
# h2c = { filter = "post", action = "h2c" }
test = { action = "hdr_test" }
lua = { filter = "lua", action = "lua_handler" }


